import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to read reads multiple RSS feeds and generates the same nicely
 * formatted HTML page of links for each feed, plus an HTML index page with
 * links to the individual feed pages.
 *
 * @author Om Patil
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.print("<html> <head> <title>");

        String titleContent = "Empty Title";
        XMLTree title = channel.child(getChildElement(channel, "title"));

        //check if title has a text child
        if (title.numberOfChildren() > 0) {
            titleContent = title.child(0).label();
        }

        out.print(titleContent);

        out.println("</title>");

        out.println("</head> <body>");

        //print title inside a link
        XMLTree link = channel.child(getChildElement(channel, "link"));
        String linkContent = link.child(0).label();
        out.println("<h1> <a href = " + linkContent + ">" + titleContent
                + "</a> </h1>");

        out.println("<p>");

        //channel description
        XMLTree description = channel
                .child(getChildElement(channel, "description"));

        String descriptionContent = ("No description found.");

        //check if description has a text child
        if (description.numberOfChildren() > 0) {
            descriptionContent = description.child(0).label();
        }

        out.println(descriptionContent);

        out.println("</p>");
        out.println("<table border=\"1\">");
        out.println("<tr>");

        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        //closing tags
        out.println("</table>");
        out.println("</body> </html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int index = -1;
        for (int i = 0; i < xml.numberOfChildren() && index == -1; i++) {
            if (xml.child(i).isTag() && xml.child(i).label().equals(tag)) {
                index = i;
            }
        }
        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        //Initializes the first row of the table
        out.println("<tr>");

        //Checks for presence of publication date
        int pubDateChild = getChildElement(item, "pubDate");

        //If not present, then print not found. Otherwise, print date.
        if (pubDateChild == -1) {
            out.println("<td>There is no publication date found.</td>");
        } else {
            String pubDateContent = item.child(pubDateChild).child(0).label();
            out.println("<td>" + pubDateContent + "</td>");
        }

        //Checks for presence of the source
        int sourceChild = getChildElement(item, "source");
        String sourceContent = "";

        //If not present, print not found. Otherwise, print the source.
        if (sourceChild == -1) {
            out.println("<td>No source available.</td>");
        } else {

            //check if source node has text child
            if (item.child(sourceChild).numberOfChildren() > 0) {
                sourceContent = item.child(sourceChild).child(0).label();

            } else {
                sourceContent = "Source not found";
            }

            out.println("<td>\t\t<a href = \""
                    + item.child(sourceChild).attributeValue("url") + "\">"
                    + sourceContent + "</a>" + "</td>");
        }

        //Check for link node and it's content
        int linkChild = getChildElement(item, "link");
        String linkContent = "";
        boolean linkPresent = false;

        if (linkChild != -1) {
            linkContent = item.child(linkChild).child(0).label();
            linkPresent = true;
        }

        //print starting code for hyperlink
        out.println("<td><a href = " + linkContent + ">");

        //Check for presence of title / description
        int titleChild = getChildElement(item, "title");
        int descriptionChild = getChildElement(item, "description");

        //if title node is present
        if (titleChild != -1) {

            //check for title text child and print
            if (item.child(titleChild).numberOfChildren() > 0) {
                String titleContent = item.child(titleChild).child(0).label();

                out.println(titleContent);

            } else { //no text child, move on to description

                if (descriptionChild != -1) {

                    //check for description text child and print
                    if (item.child(descriptionChild).numberOfChildren() > 0) {
                        String descriptionContent = item.child(descriptionChild)
                                .child(0).label();

                        //hyperlink if present
                        out.println("<td>" + descriptionContent + "</td>");

                    } else { //no description text child

                        //hyperlink if present
                        out.println("No description found.");

                    }

                }

            }

        } else { //no title node, check for description

            if (descriptionChild != -1) {

                //check for description text child and print
                if (item.child(descriptionChild).numberOfChildren() > 0) {
                    String descriptionContent = item.child(descriptionChild)
                            .child(0).label();

                    //hyperlink if present
                    out.println(descriptionContent);

                } else { //no description text child

                    //hyperlink if present
                    out.println("No description found.");
                }

            }

        }

        //print closing link tag if present
        if (linkPresent) {
            out.println("</a>");
        }

        //close table data
        out.println("</td>");
    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {

        SimpleWriter feedOutput = new SimpleWriter1L(file);
        XMLTree feed = new XMLTree1(url);
        XMLTree feedChannel = feed.child(0);

        //check for valid RSS 2.0 feed
        boolean valid = feed.label().equals("rss")
                && feed.hasAttribute("version")
                && feed.attributeValue("version").equals("2.0");

        //update console on status of RSS feed
        if (valid) {
            out.println(url + ": feed accepted.");

            //print header
            outputHeader(feedChannel, feedOutput);

            // Outputs the table to the file
            for (int i = 0; i < feedChannel.numberOfChildren(); i++) {
                if (feedChannel.child(i).label().equals("item")) {
                    processItem(feedChannel.child(i), feedOutput);
                }
            }
            //print footer
            outputFooter(feedOutput);

        } else {

            out.print(url + ": not valid RSS 2.0 feed. ");
            out.println("Please try again with appropriate sources.");
        }

        //close streams
        feedOutput.close();

    }

    /**
     * Processes input XMLTree and creates the index page containing links to
     * the pages for the individual RSS feeds.
     *
     * @param sources
     *            the name of the XMLTree with RSS urls
     * @param indexOut
     *            the index output stream to print index to it's file
     * @updates indexOut.content
     * @requires indexOut.is_open
     * @ensures <pre>
     * [reads XMLTree, writes an index of links to the individual feed pages
     * to output file using stream indexOut]
     * </pre>
     */
    private static void createIndex(XMLTree sources, SimpleWriter indexOut) {

        // Output the index page to the output file

        //Opening tags
        indexOut.println("<html>");

        indexOut.println("</head>");

        //Print feed title as the page title
        String title = sources.attributeValue("title");
        indexOut.println("<title>" + title + "</title>");

        indexOut.println("</head>");
        indexOut.println("<body>");

        indexOut.println("<h2>" + title + "</h2>");
        indexOut.println("<ul>");

        //Print table of feeds and their respective links
        for (int i = 0; i < sources.numberOfChildren(); i++) {
            String file = sources.child(i).attributeValue("file");
            String name = sources.child(i).attributeValue("name");

            indexOut.println(
                    "<li><a href=\"" + file + "\">" + name + "</a></li>");
        }

        indexOut.println("</ul>");

        //Closing tags for index page
        indexOut.println("</body>");
        indexOut.println("</html>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        //ask for input XML file with feeds
        out.println(
                "Please enter the input XML file containing the RSS 2.0 Feeds. ");
        XMLTree sources = new XMLTree1(in.nextLine());

        out.println(
                "Please enter the name of the output HTML file (with it's extension)");
        SimpleWriter indexOutput = new SimpleWriter1L(in.nextLine());

        //create index output file
        createIndex(sources, indexOutput);

        //process all of the feeds and create their respective html files
        for (int i = 0; i < sources.numberOfChildren(); i++) {
            XMLTree feed = sources.child(i);
            processFeed(feed.attributeValue("url"), feed.attributeValue("file"),
                    out);
        }

        //close streams
        in.close();
        out.close();
        indexOutput.close();
    }

}
